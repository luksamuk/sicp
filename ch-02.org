#+TITLE: Building Abstractions with Data
#+AUTHOR: Lucas S. Vieira
#+LANGUAGE: en-us
#+OPTIONS: toc:nil
#+STARTUP: latexpreview showeverything inlineimages
#+PROPERTY: header-args:scheme :cache yes :noweb strip-export :exports both

* Exercise 2.1

#+begin_src scheme
(define (make-rat n d)
  (if (negative? d)
      (make-rat (- n) (- d))
      (let ((g (gcd n d)))
        (cons (/ n g) (/ d g)))))
#+end_src

* Exercise 2.2

#+name: point_segment
#+begin_src scheme
;; Segments are pairs of points
(define (make-segment p1 p2)
  (cons p1 p2))

(define (start-segment s) (car s))

(define (end-segment s) (cdr s))


;; Points are pairs of numbers
(define (make-point x y)
  (cons x y))

(define (x-point p) (car p))

(define (y-point p) (cdr p))


;; Midpoint
(define (midpoint-segment s)
  (define (average a b)
    (/ (+ a b) 2))
  (let ((start (start-segment s))
        (end   (end-segment   s)))
    (make-point (average (x-point start) (x-point end))
                (average (y-point start) (y-point end)))))


;; Given by exercise
(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ", ")
  (display (y-point p))
  (display ")"))
#+end_src

** Tests

#+begin_src scheme :results output
<<point_segment>>

(define x (make-point 0 0))
(define y (make-point 10 10))
(define s (make-segment x y))
(define z (midpoint-segment s))

(map print-point (list x y z))
#+end_src

#+RESULTS[cb8c430a29ba10547379b0319bbc4026877f8994]:
: 
: (0, 0)
: (10, 10)
: (5, 5)

* Exercise 2.3

*NOTE:* Reusing answers to Exercise 2.2.

** Representation 1

Two diagonal points.

#+name: repr_rect1
#+begin_src scheme
<<point_segment>>

(define (make-rect p1 p2)
  (cons p1 p2))

(define (rect-width r)
  (let ((fst (car r))
        (snd (cdr r)))
    (abs (- (y-point fst) (y-point snd)))))

(define (rect-height r)
  (let ((fst (car r))
        (snd (cdr r)))
    (abs (- (x-point fst) (x-point snd)))))
#+end_src

** Representation 2

Bottom-left point, width and height.

#+name: repr_rect2
#+begin_src scheme
<<point_segment>>

(define (make-rect p w h)
  (cons p (cons w h)))

(define (rect-width r)
  (car (cdr r)))

(define (rect-height r)
  (cdr (cdr r)))
#+end_src

** Area and perimeter

These functions should work with any of the above implementations.

#+name: rect_area_perimeter
#+begin_src scheme
(define (rect-perimeter r)
  (* 2 (+ (rect-width r)
          (rect-height r))))

(define (rect-area r)
  (* (rect-width r)
     (rect-height r)))
#+end_src

** Running tests

#+begin_src scheme :results output
<<repr_rect1>>
<<rect_area_perimeter>>

(define x (make-rect (make-point 0 0)
                     (make-point 10 10)))
(define y (make-rect (make-point 10 10)
                     (make-point 20 15)))

(map (lambda (r)
       (newline)
       (display "Perimeter: ")
       (display (rect-perimeter r))
       (display " Area: ")
       (display (rect-area r)))
     (list x y))
#+end_src

#+RESULTS[24e84c580f5db4840f1cc70947c6c8bc2cb49da5]:
: 
: Perimeter: 40 Area: 100
: Perimeter: 30 Area: 50

#+begin_src scheme :results output
<<repr_rect2>>
<<rect_area_perimeter>>

(define x (make-rect (make-point 0 0) 10 10))
(define y (make-rect (make-point 10 10) 10 5))

(map (lambda (r)
       (newline)
       (display "Perimeter: ")
       (display (rect-perimeter r))
       (display " Area: ")
       (display (rect-area r)))
     (list x y))
#+end_src

#+RESULTS[e6cfee049defec94b68749e016a7c949e0362672]:
: 
: Perimeter: 40 Area: 100
: Perimeter: 30 Area: 50

* Exercise 2.4

#+begin_src scheme
(define (cons x y)
  (lambda (m) (m x y)))

(define (car z)
  (z (lambda (p q) p)))

(define (cdr z)
  (z (lambda (p q) q)))
#+end_src

By using the substitution model:

#+begin_example
> (define x (cons 1 2))

======

> (car x)

> (car (lambda (m) (m 1 2)))

> ((lambda (m) (m 1 2))
   (lambda (p q) p))

> ((lambda (p q) p) 1 2)

> 1

======

> (cdr x)

> (cdr (lambda (m) (m 1 2)))

> ((lambda (m) (m 1 2))
   (lambda (p q) q))

> ((lambda (p q) q) 1 2)

> 2
#+end_example

* Exercise 2.5

The idea here is that we can partially factor a given number by taking
either 2 or 3 and counting how many times the number can be divided by
these two.

We do not test for a valid "cons" number, but it could be used by
verifying that the number is both even and the sum of its digits is
divisible by 3, for example.

#+begin_src scheme :results output
(define (num-divisions divisor number)
  (define (divisible? a b)
    (zero? (remainder a b)))
  (define (iter num acc)
    (if (divisible? num divisor)
        (iter (/ num divisor) (1+ acc))
        acc))
  (iter number 0))

(define (n-cons a b)
  (* (expt 2 a)
     (expt 3 b)))

(define (n-car n)
  (num-divisions 2 n))

(define (n-cdr n)
  (num-divisions 3 n))

;; Test
(map (lambda (c)
       (newline)
       (display "(")
       (display (n-car c))
       (display " . ")
       (display (n-cdr c))
       (display ")"))
     (list (n-cons   1   3)
           (n-cons   2   5)
           (n-cons  25  32)
           (n-cons   2   8)
           (n-cons 422 684)))
#+end_src

#+RESULTS[4402009da29651d4a48635ffc9e61ec6fe79fdc0]:
: 
: (1 . 3)
: (2 . 5)
: (25 . 32)
: (2 . 8)
: (422 . 684)

* Exercise 2.6

#+name: church_numbers
#+begin_src scheme
;; Given by exercise
(define zero (lambda (f) (lambda (x) x)))

(define (add-1 n)
  (lambda (f)
    (lambda (x) (f ((n f) x)))))


;; Answer
(define one (lambda (f) (lambda (x) (f x))))
(define two (lambda (f) (lambda (x) (f (f x)))))

(define (plus a b)
  (lambda (f)
    (lambda (x) ((a f) ((b f) x)))))


(define (church->number f)
  ((f 1+) 0))
#+end_src

Tests:

#+begin_src scheme :results output
<<church_numbers>>

(define (run-test)
  (let ((tests (list zero                         ; 0
                     one                          ; 1
                     two                          ; 2
                     (add-1 two)                  ; 3
                     (add-1 (add-1 two))          ; 4
                     (plus one two)               ; 3
                     (plus one (add-1 two))       ; 4
                     (plus (add-1 two) one)       ; 4
                     (plus (add-1 two)            ; 7
                           (add-1 (add-1 two)))
                     (plus two (plus two two))))) ; 6
    (map (lambda (f)
           (newline)
           (display (church->number f)))
         tests)))

(run-test)
#+end_src

#+RESULTS[7a02c36f9b079186f26d6ec00c7734ec111df169]:
#+begin_example

0
1
2
3
4
3
4
4
7
6
#+end_example

* Exercise 2.7

Given by section and exercises:

#+name: interval_funs
#+begin_src scheme
(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))

(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(define (div-interval x y)
  (mul-interval x
                (make-interval (/ 1.0 (upper-bound y))
                               (/ 1.0 (lower-bound y)))))
#+end_src

Answer:

#+name: interval_def
#+begin_src scheme
<<interval_funs>>

;; Given by exercise
(define (make-interval a b) (cons a b))

(define (upper-bound i) (cdr i))
(define (lower-bound i) (car i))
#+end_src

* Exercise 2.8

#+name: interval_sub
#+begin_src scheme
<<interval_def>>

(define (sub-interval x y)
  (add-interval x
                (make-interval (- (upper-bound y))
                               (- (lower-bound y)))))
#+end_src

* Exercise 2.9

Given definition:

#+name: interval_width
#+begin_src scheme
<<interval_sub>>

(define (width i)
  (/ (- (upper-bound i)
        (lower-bound i))
     2))
#+end_src

We define a few intervals and their sum and multiplication, for
experimentation purposes.

#+name: interval_examples
#+begin_src scheme
<<interval_width>>

(define a (make-interval 0 5))
(define b (make-interval 2 4))
(define z (add-interval a b))
(define w (mul-interval a b))
#+end_src

By doing normal-order evaluation, we can verify the values of widths
for =a=, =b= and =z=:

#+begin_example
> (width a)
> (/ (- 5 0) 2)
> 5/2

> (width b)
> (/ (- 4 2) 2)
> 2

> (width z)
> (/ (- 9 2) 2)
> 7/2
#+end_example

It seems that the width of the sum of two intervals =a= and =b= correspond
to doubling the width of those intervals, summing them, and then
dividing the result by two again. We can write a procedure for this
behaviour.

#+name: interval_sum_width
#+begin_src scheme
<<interval_examples>>

(define (sum-width x y)
  (/ (+ (* 2 (width x))
        (* 2 (width y)))
     2))
#+end_src

By testing, we verify that this is indeed true:

#+begin_src scheme :results output
<<interval_sum_width>>

(let ((width-z (width z))
      (width-sum (sum-width a b)))
  (display width-z)
  (display " = ")
  (display width-sum)
  (display "?    ")
  (display (= width-z width-sum))
  (newline))
#+end_src

#+RESULTS[3267be305966869e1c43b06211ef5b56d027603a]:
: 7/2 = 7/2?    #t

Indeed, this is not true for multiplications of intervals:

#+begin_src scheme :results output
<<interval_sum_width>>

(let ((width-w (width w))
      (width-sum (sum-width a b)))
  (display width-w)
  (display " = ")
  (display width-sum)
  (display "?    ")
  (display (= width-w width-sum))
  (newline))
#+end_src

#+RESULTS[c0d31db70d42beefa59b91b31e3756e13908671a]:
: 10 = 7/2?    #f
