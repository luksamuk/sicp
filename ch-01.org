#+TITLE: Building Abstractions with Procedures
#+AUTHOR: Lucas S. Vieira
#+LANGUAGE: en-us
#+OPTIONS: toc:nil
#+STARTUP: latexpreview showeverything inlineimages

[fn:ex1-7] This solution is still a problem for small numbers and needs to be revisited.

* Helper functions

#+begin_src scheme
(define (identity x) x)
(define (square x) (* x x))
(define (cube x) (* x x x))

(define (smallest-divisor n)
  (find-divisor n 2))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (1+ test-divisor)))))

(define (divides? a b)
  (zero? (remainder b a)))

(define (prime? n)
  (and (>= n 2)
       (= n (smallest-divisor n))))

(define (average a b)
  (/ (+ a b) 2))
#+end_src

* Exercise 1.1

#+BEGIN_SRC text
  10 ;; => 10

  (+ 5 3 4) ;; => 12

  (- 9 1) ;; => 8

  (/ 6 2) ;; => 3

  (+ (* 2 4) (- 4 6)) ;; => 6

  (define a 3) ;; => a

  (define b (+ a 1)) ;; => b

  (+ a b (* a b)) ;; => 19

  (= a b) ;; => #f

  (if (and (> b a) (< b (* a b)))
      b
      a) ;; => 4

  (cond ((= a 4) 6)
        ((= b 4) (+ 6 7 a))
        (else 25)) ;; => 16

  (+ 2 (if (> b a) b a)) ;; => 6

  (* (cond ((> a b) a)
           ((< a b) b)
           (else -1))
     (+ a 1)) ;; => 16
#+END_SRC

* Exercise 1.2

#+BEGIN_SRC scheme
  (/ (+ 5 4 (- 2 3 (+ 6 (/ 4 5))))
     (* 3 (- 6 2) (- 2 7)))
#+END_SRC

* Exercise 1.3

#+BEGIN_SRC scheme
  (define (square-of-two-largest x y z)
    (cond ((> x y)
           (+ (* x x)
              (if (> y z)
                  (* y y)
                  (* z z))))
          (else
           (+ (* y y)
              (if (> x z)
                  (* x x)
                  (* z z))))))
#+END_SRC

* Exercise 1.4

The conditional inside the expression yields a different operation with respect to
the value of =b=. This operation is, then, applied to =a= and =b=.

* Exercise 1.5

When the interpreter uses applicative-order evaluation, the procedure yields correctly
the value =0=, since when evaluating the conditional contained in the body of the expression,
it only evaluates the predicate, finds it to be true, and then proceeds to yield the result
of the evaluation of the consequent. However, in normal-order evaluation, the interpreter
will proceed as expected until after the predicate evaluation; at this point, it will attempt
to evaluate not only the consequent, but also the alternative, which will force the program to
enter an infinite behaviour.

* Exercise 1.6

When Alyssa attempts to use this new implementation, the program will end up in an infinite loop.
Since =new-if= is implemented as a function, whenever it is called, it will attempt to evaluate
the predicate, the consequent and the alternative, before actually getting to the conditional
statement. This will result in the calling of =sqrt-iter=, even when the program is supposed to
stop.

* Exercise 1.7

*NOTE:* /This exercise is potentially wrong./

=good-enough?=, as currently given, can easily be show to not work on very small or very large
numbers, since it uses a fixed number (=0.001=) as a way to determine if the difference is small
enough. This means that calculations such as

#+BEGIN_SRC scheme
  (sqrt 1000000)
  (sqrt 0.0000001)
#+END_SRC

will most likely take quite a while to catch up with their expected values, though their results
can be quicker to calculate through other means. [TODO: failure? I need to talk about it, these
statements might be wrong!]

We may, then, design a =square-root= procedure[fn:ex1-7] which takes the guess and watches how it evolves,
and then stop when the change is a very small fraction of the guess:

#+BEGIN_SRC scheme
  (define (good-enough? guess old-guess)
    (< (abs (- guess old-guess))
       (/ guess 10000)))

  (define (average x y)
    (/ (+ x y) 2))

  (define (improve guess x)
    (average guess (/ x guess)))

  (define (sqrt-iter guess old-guess x)
    (if (good-enough? guess old-guess)
        guess
        (sqrt-iter (improve guess x)
                   guess
                   x)))

  (define (sqrt x)
    (sqrt-iter 1.0 0.0 x))
#+END_SRC

* Exercise 1.8

In this example, we use the =good-enough?= algorithm from the previous exercise. The heavy
changes, when compared to the square root algorithm, happen on the =improve-cb= procedure.

#+BEGIN_SRC scheme
  ;; We borrow square from the book
  (define (square x)
    (* x x))


  (define (good-enough? guess old-guess)
    (< (abs (- guess old-guess))
       (/ guess 10000)))

  (define (improve-cb guess x)
    (/ (+ (/ x (square guess))
          (* 2 guess))
       3))

  (define (cbrt-iter guess old-guess x)
    (if (good-enough? guess old-guess)
        guess
        (cbrt-iter (improve-cb guess x)
                   guess
                   x)))

  (define (cbrt x)
    (cbrt-iter 1.0 0.0 x))
#+END_SRC

* Exercise 1.9

First method:
#+BEGIN_SRC text
  (+ 4 5)
  (inc (+ (dec 4) 5))
  (inc (+ 3 5))
  (inc (inc (+ (dec 3) 5)))
  (inc (inc (+ 2 5)))
  (inc (inc (inc (+ (dec 2) 5))))
  (inc (inc (inc (+ 1 5))))
  (inc (inc (inc (inc (+ (dec 1) 5)))))
  (inc (inc (inc (inc (+ 0 5)))))
  (inc (inc (inc (inc 5))))
  (inc (inc (inc 6)))
  (inc (inc 7))
  (inc 8)
  9
#+END_SRC
This is a linear recursive process.

Second method:
#+BEGIN_SRC text
  (+ 4 5)
  (+ (dec 4) (inc 5))
  (+ 3 6)
  (+ (dec 3) (inc 6))
  (+ 2 7)
  (+ (dec 2) (inc 7))
  (+ 1 8)
  (+ (dec 1) (inc 8))
  (+ 0 9)
  9
#+END_SRC
This is a linear iterative process.

* Exercise 1.10

For this exercise, instead of evaluating a linear recursive process by hand, I gave up and
had Chez Scheme evaluate the results for me.

#+BEGIN_SRC text
  (A 1 10) => 1024
  (A 2 4)  => 65536
  (A 3 3)  => 65536
#+END_SRC

Concise mathematical definitions:
#+BEGIN_SRC text
  (f n) => 2n
  (g n) => 2^n
  (h n) => 2^n²
  (k n) => 5n²
#+END_SRC

* Exercise 1.11

=f='s rules for reference:

\begin{equation*}
    f(n) =
    \left\{
        \begin{array}{ll}
                n & \textrm{for } $n < 3$\\
                f(n - 1) + 2 f(n - 2) + 3 f(n - 3) & \textrm{otherwise}
    \right.
\end{equation*}

Now we compute a procedure that calculates =f(n)= through an iterative process.
#+BEGIN_SRC scheme
(define (f-iter n count back2 back1 curr)
  (cond ((= count n) curr)
        (else (f-iter n (1+ count) back1 curr
                      (+ curr
                         (* 2 back1)
                         (* 3 back2))))))

(define (f n)
  (cond ((< n 3) n)
        (else (f-iter n 2 0 1 2))))

;; Recursive implementation, for comparision
(define (f-recursive n)
  (cond ((< n 3) n)
        (else (+ (f-recursive (1- n))
                 (* 2 (f-recursive (- n 2)))
                 (* 3 (f-recursive (- n 3)))))))
#+END_SRC

* Exercise 1.12

This solution assumes base-0 and valid indexes.
#+begin_src scheme
  (define (pascal-element level n)
    (cond ((or (= n 0)
               (= n level)) 1)
          (else (+ (pascal-element (1- level)
                                   (1- n))
                   (pascal-element (1- level) n)))))
#+end_src

* Exercise 1.13

#+BEGIN_SRC scheme
  ;; Predefine useful values

  (define *phi* (/ (1+ (sqrt 5)) 2))
  (define *psi* (/ (1- (sqrt 5)) 2))

  ;; Optimized Fibonacci by iteration, copied from the
  ;; book. Seemed like a better way to handle this.
  ;; Protip: don't use the naive implementation to
  ;; calculate fib(60).
  (define (fib-opt-iter a b count)
    (cond ((= count 0) b)
          (else (fib-opt-iter (+ a b) a (1- count)))))

  (define (fib-opt n)
    (fib-opt-iter 1 0 n))


  ;; Instead of writing our own expt function,
  ;; we'll use Scheme's expt

  ;; Fibonacci by approximation.

  ;; NOTE: For some reason, this seems to only work
  ;; for n > 1 (meaning, the first value is never found
  ;; to be 1). Could be an arbitrary computational error,
  ;; but I'll ask around to make sure. Could be a mistake
  ;; of mine.

  (define (fib-approx n)
    (inexact->exact
     (round (/ (- (expt *phi* n)
                  (expt *psi* n))
               (sqrt 5)))))


  ;; Now we try to prove that these two processes
  ;; calculate the same number for as much as you
  ;; want.

  (define (fib-prove-iter count max)
    (if (> count max)
        #t
        (let ((iter-result (fib-opt count))
              (appr-result (fib-approx count)))
          (if (= iter-result appr-result)
              (fib-prove-iter (1+ count) max)
              #f))))

  ;; About this arbitrary 2... look at the note above.
  (define (fib-prove iterations)
    (if (>= iterations 2)
        (fib-prove-iter 2 iterations)))
#+END_SRC

* Exercise 1.14

As the amount of the change grows, the algorithm seems to have both orders of space
and number of steps equal to \theta{}(n²).

Below is a diagram for the expansion of =count-change=.

#+CAPTION: Expansion of the =count-change= function with number 11.
#+NAME:    fig:ex1-14
[[./graphs/ex1-14.png]]

* Exercise 1.15
** a

The procedure =p= is applied five times.

** b

The procedure seems to have both orders of space and number of steps equal
to $\theta{}(log(a))$.

* Exercise 1.16

*Observations.* Given a base $b$, an exponent $n$, and a state variable
 $a$, we have

1. $b^n = (b^{\frac{n}{2}})^2$ if $n$ is even;
2. $b^n = b \times b^{n - 1}$ if $n$ is odd;
3. $a$ starts at $1$;
4. $(b^{\frac{n}{2}})^2 = (b^2)^{\frac{n}{2}}$;
5. $ab^n$ should remain unchanged for every state.

#+begin_src scheme
(define (fast-expt-iter b n)
  (define (iter b n a)
    (cond ((zero? n) a)
          ((even? n)
           (iter (square b) (/ n 2) a))
          (else (iter b (1- n) (* a b)))))
  (iter b n 1))
#+end_src

* Exercise 1.17

#+begin_src scheme
(define (fast-mult a b)
  (cond ((zero? b) 0)
        ((even? b)
         (double (fast-mult a (halve b))))
        (else (+ a (fast-mult a (1- b))))))
#+end_src

* Exercise 1.18

#+begin_src scheme
(define (fast-mult-iter a b)
  (define (iter a b acc)
    (cond ((zero? b) acc)
          ((even? b)
           (iter (double a) (halve b) acc))
          (else (iter a (1- b) (+ acc a)))))
  (iter a b 0))
#+end_src

* Exercise 1.19

Let there be a transformation $T_{pq} \, : \, (a_0, b_0) \mapsto (a_1,
b_1)$ such that

\begin{align*}
    a_1 &= b_0 q + a_0 q + a_0 p\\
        &= p \cdot a_0 + q (a_0 + b_0)\\
    b_1 &= p \cdot b_0 + q \cdot a_0
\end{align*}

We say that a transformation $T_{p'q'}$ corresponds to applying
$T_{pq}$ twice to $(a_0, b_0)$ such that

\begin{equation*}
    T_{p'q'} = T_{pq}(T_{pq}) \, : \, (a_0, b_0) \mapsto (a_2, b_2)
\end{equation*}

By applying $T_{pq}$ to $(a_1, b_1)$, we determine $(a_2, b_2)$ by the
transformation's definition:

\begin{align*}
    a_2 &= p \cdot a_1 + q (a_1 + b_1)\\
    b_2 &= p \cdot b_1 + q \cdot a_1
\end{align*}

Developing $a_2$ in terms of $a_1$, and isolating $a_0$ and $b_0$, we
get

\begin{align*}
    a_2 &= p\left(p \cdot a_0 + q(a_0 + b_0)\right) + q\left(p \cdot a_0 + q(a_0 + b_0) + p \cdot b_0 + q \cdot a_0\right)\\
        &= p^2 \cdot a_0 + pq(a_0 + b_0) + pq \cdot a_0 + q^2(a_0 + b_0) + pq \cdot b_0 + q^2 \cdot a_0\\
        &= p^2 \cdot a_0 + q^2(a_0 + b_0 + a_0) + pq(a_0 + b_0 + a_0 + b_0)\\
        &= (p^2 \cdot a_0) + (q^2 \cdot a_0) + (q^2 \cdot b_0) + (q^2 \cdot a_0) + (pq \cdot a_0) + (pq \cdot b_0) + (pq \cdot a_0) + (pq \cdot b_0)\\
        &= a_0 \left((p^2 + q^2) + (q^2 + pq + pq)\right) + b_0 (q^2 + pq + pq)\\
        &= b_0 (q^2 + 2pq) + a_0 (p^2 + 2pq) + a_0 (p^2 + q^2)\\
        \equiv &\quad b_0 q' + a_0 q' + a_0 p'\\
\therefore\quad &p' = p^2 + q^2 \qquad q' = q^2 + 2pq \quad \blacksquare
\end{align*}

We can confirm this result by substituting $a_1$ and $b_1$ in $b_2$'s
definition as well:

\begin{align*}
    b_2 &= b_0 p' + a_0 q'\\
        &= b_0 (p^2 + q^2) + a_0 (q^2 + 2pq) \qquad \quad \text{(by lemma)}\\
        \\
    b_2 &= p \cdot b_1 + q \cdot a_1\\
        &= p (p \cdot b_0 + q \cdot a_0) + q\left(p \cdot a_0 + q (a_0 + b_0)\right)\\
        &= p^2 b_0 + pq \cdot a_0 + pq \cdot a_0 + q^2 (a_0 + b_0)\\
        &= p^2 b_0 + pq \cdot a_0 + pq \cdot a_0 + q^2 a_0 + q^2 b_0\\
        &= b_0 (p^2 + q^2) + a_0 (q^2 + 2pq)\\
        \equiv &\quad b_0 p' + a_0 q' \quad \blacksquare 
\end{align*}

This result allows us to model $p'$ and $q'$ in terms of $p$ and $q$,
so we'll define internal procedures =p-line= and =q-line= to calculate
them.

#+begin_src scheme
(define (fib n)
  (fib-iter 1 0 0 1 n))

(define (fib-iter a b p q count)
  (define (p-line p q)
    (+ (square p)
       (square q)))
  (define (q-line p q)
    (+ (square q)
       (* 2 p q)))
  (cond ((= count 0) b)
        ((even? count)
         (fib-iter a
                   b
                   (p-line p q) ; compute p'
                   (q-line p q) ; compute q'
                   (/ count 2)))
        (else (fib-iter (+ (* b p) (* a q) (* a p))
                        (+ (* b p) (* a q))
                        p
                        q
                        (1- count)))))
#+end_src

* Exercise 1.20

** Using normal-order evaluation

#+begin_example
> (gcd 206 40)

> (if (= 40 0)
      206
      (gcd 40 (remainder (206 40))))

> (gcd 40 (remainder 206 40))

> (if (= (remainder 206 40) 0)
      40
      (gcd (remainder 206 40)
           (remainder 40 (remainder 206 40))))
<+1 remainder executions>

> (gcd (remainder 206 40)
       (remainder 40 (remainder 206 40)))

> (if (= (remainder 40 (remainder 206 40)) 0)
      (remainder 206 40)
      (gcd (remainder 40 (remainder 206 40))
           (remainder (remainder 206 40)
                      (remainder 40 (remainder 206 40)))))
<+2 remainder executions>

> (gcd (remainder 40 (remainder 206 40))
       (remainder (remainder 206 40)
                  (remainder 40 (remainder 206 40))))

> (if (= (remainder (remainder 206 40)
                    (remainder 40 (remainder 206 40)))
         0)
      (remainder 40 (remainder 206 40))
      (gcd (remainder (remainder 206 40)
                      (remainder 40 (remainder 206 40)))
           (remainder (remainder 40 (remainder 206 40))
                      (remainder (remainder 206 40)
                                 (remainder 40 (remainder 206 40))))))
<+4 remainder executions>

> (gcd (remainder (remainder 206 40)
                  (remainder 40 (remainder 206 40)))
       (remainder (remainder 40 (remainder 206 40))
                  (remainder (remainder 206 40)
                             (remainder 40 (remainder 206 40)))))

> (if (= (remainder (remainder 40 (remainder 206 40))
                    (remainder (remainder 206 40)
                               (remainder 40 (remainder 206 40))))
          0)
      (remainder (remainder 206 40)
                 (remainder 40 (remainder 206 40)))
      (gcd (remainder (remainder 40 (remainder 206 40))
                      (remainder (remainder 206 40)
                                 (remainder 40 (remainder 206 40))))
           (remainder (remainder (remainder 206 40)
                                 (remainder 40 (remainder 206 40)))
                      (remainder (remainder 40 (remainder 206 40))
                                 (remainder (remainder 206 40)
                                            (remainder 40 (remainder 206 40)))))))
<+7 remainder executions>

> (remainder (remainder 206 40)
             (remainder 40 (remainder 206 40)))
<+4 remainder executions>

> 2
#+end_example

** Using applicative order evaluation

#+begin_example
> (gcd 206 40)

> (if (= 40 0)
      206
      (gcd 40 (remainder 206 40)))

> (gcd 40 (remainder 206 40))
<+1 remainder execution>

> (gcd 40 6)

> (if (= 6 0)
      40
      (gcd 6 (remainder 40 6)))

> (gcd 6 (remainder 40 6))
<+1 remainder execution>

> (gcd 6 4)

> (if (= 4 0)
      6
      (gcd 4 (remainder 6 4)))

> (gcd 4 (remainder 6 4))
<+1 remainder execution>

> (gcd 4 2)

> (if (= 2 0)
      4
      (gcd 2 (remainder 4 2)))

> (gcd 2 (remainder 4 2))
<+1 remainder execution>

> (gcd 2 0)

> (if (= 0 0)
      2
      (gcd 0 (remainder 2 0)))

> 2
#+end_example

** Results

- Total remainder executions in normal-order evaluation: 18
- Total remainder executions in applicative order evaluation: 4

* Exercise 1.21

Simple code execution is sufficient to provide an answer.

#+begin_src scheme :exports both :results output :cache yes
(define (square x)
  (* x x))

(define (smallest-divisor n)
  (find-divisor n 2))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (1+ test-divisor)))))

(define (divides? a b)
  (= (remainder b a) 0))

;; Some trickery!
(map (lambda (num)
       (display "Smallest divisor of ")
       (display num)
       (display ": ")
       (display (smallest-divisor num))
       (newline))
     '(199 1999 19999))
#+end_src

#+RESULTS[84745e32e19425ffa34379bb0f5f90ebc1e43fa7]:
: Smallest divisor of 199: 199
: Smallest divisor of 1999: 1999
: Smallest divisor of 19999: 7

* Exercise 1.22

#+begin_src scheme
(define (search-for-primes start end)
  (cond ((>= start end) '())
        ((even? start)
         (search-for-primes (1+ start) end))
        (else (begin
                (timed-prime-test start)
                (search-for-primes (+ start 2) end)))))
#+end_src

* Exercise 1.23

#+begin_src scheme
(define (smallest-divisor n)
  (find-divisor n 2))

(define (find-divisor n test-divisor)
  (define (next divisor)
    (if (= divisor 2) 3 (+ divisor 2)))
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (next test-divisor)))))

(define (divides? a b)
  (= (remainder b a) 0))
#+end_src

#+begin_src scheme
(map smallest-divisor (cdr (iota 1000)))
#+end_src

* Exercise 1.26

The function computes =(expmod base (/ exp 2) m)= twice for every
squaring operation, which previously only computed this value once and
then squared it. This behaviour increases the complexity of the
function.

* Exercise 1.27

#+begin_src scheme
(define (fermat-test n)
  (fermat-test-iter 1 n))

(define (fermat-test-iter a n) ; a^n cong to a mod n
  (cond ((>= a n) #t)
        ((= (remainder (expt a n) n)
            (remainder a n))
         (fermat-test-iter (1+ a) n))
        (else #f)))
#+end_src

#+begin_src scheme
(map fermat-test '(561 1105 1729 2465 2821 6601))
#+end_src

* Exercise 1.28

#+begin_src scheme
(define (expmod base exp m)
  (define (trivial? value)
    (and (not (= value 1))
         (not (= value (1- m)))
         (= (square value) (remainder 1 m))))
  (define (zero-or-mod value)
    (if (trivial? value)
        0
        (remainder value m)))
  (cond ((= exp 0) 1)
        ((even? exp)
         (zero-or-mod
          (square (expmod base (/ exp 2) m))))
        (else
         (remainder (* base (expmod base (1- exp) m))
                    m))))

(define (miller-rabin-test n)
  (define (try-it a)
    (not (zero? (expmod a (1- n) n))))
  (try-it (1+ (random (1- n)))))

(define (fast-prime-mr? n times)
  (if (not (and (even? n) (> n 2)))
      (cond ((= times 0) #t)
            ((miller-rabin-test n)
             (fast-prime-mr? n (1- times)))
            (else #f))
      #f))
#+end_src

#+begin_src scheme
(define (remove-if pred lst)
  (cond ((null? lst) lst)
        ((pred (car lst))
         (remove-if pred (cdr lst)))
        (else (cons (car lst)
                    (remove-if pred (cdr lst))))))
#+end_src

#+begin_src scheme
(let ((num-tests 1000)
      (range     1000))
  (remove-if (lambda (n)
               (or (and (even? n)
                        (> n 2))
                   (not (fast-prime-mr? n num-tests))))
             (cddr (iota range))))
#+end_src

* Exercise 1.29

#+begin_src scheme
(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a)
         (sum term (next a) next b))))
#+end_src

#+begin_src scheme
(define (simpson-rule f a b n)
  (let ((h (/ (- b a) n)))
    (define (simpson-y k)
      (f (+ a (* k h))))
    (define (simpson-term k)
      (* (+ 2 (* 2 (remainder k 2)))
         (simpson-y k)))
    (* (/ h 3)
       (+ (simpson-y 0)
          (simpson-y n)
          (sum simpson-term 1 1+ (1- n))))))
#+end_src

#+begin_src scheme
(define (cube x)
  (* x x x))

(map (lambda (n)
       (simpson-rule cube 0 1 n))
     '(100 1000))
#+end_src

* Exercise 1.30

#+begin_src scheme
(define (sum term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (+ (term a) result))))
  (iter a 0))
#+end_src

* Exercise 1.31

** a

Linear recursive process

#+begin_src scheme
(define (product term a next b)
  (if (> a b)
      1
      (* (term a)
         (product term (next a) next b))))
#+end_src

Factorial

#+begin_src scheme
(define (factorial n)
  (product (lambda (x) x) 1 1+ n))
#+end_src

Computing π

#+begin_src scheme
(define (compute-pi steps)
  (define (numer-term n)
    (or (and (odd? n) (1+ n))
        (+ n 2)))
  (define (denom-term n)
    (or (and (odd? n) (+ n 2))
        (1+ n)))
  (/ (product numer-term 1 1+ steps)
     (product denom-term 1 1+ steps)
     0.25))
#+end_src

** b

Iterative process

#+begin_src scheme
(define (product term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (* (term a) result))))
  (iter a 1))
#+end_src

* Exercise 1.32

** a

#+begin_src scheme
(define (accumulate combiner null-value term a next b)
  (if (> a b)
      null-value
      (combiner (term a)
                (accumulate combiner
                            null-value
                            term
                            (next a)
                            next
                            b))))
#+end_src

#+begin_src scheme
(define (sum term a next b)
  (accumulate + 0 term a next b))

(define (product term a next b)
  (accumulate * 1 term a next b))
#+end_src

** b

Iterative process

#+begin_src scheme
(define (accumulate combiner null-value term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a)
              (combiner (term a) result))))
  (iter a null-value))
#+end_src

* Exercise 1.33

#+begin_src scheme
(define (filtered-accumulate filter combiner null-value term a next b)
  (cond ((> a b) null-value)
        ((filter a)
         (combiner (term a)
                   (filtered-accumulate filter
                                        combiner
                                        null-value
                                        term
                                        (next a)
                                        next
                                        b)))
        (else
         (filtered-accumulate filter
                              combiner
                              null-value
                              term
                              (next a)
                              next
                              b))))
#+end_src

** a

#+begin_src scheme
(define (sum-squared-primes a b)
  (filtered-accumulate prime? + 0 square a 1+ b))
#+end_src

** b

#+begin_src scheme
(define (mult-relatively-primes n)
  (define (relatively-prime? i)
    (= (gcd i n) 1))
  (filtered-accumulate relatively-prime?
                       ,*
                       1
                       identity
                       1
                       1+
                       (1- n)))
#+end_src

* Exercise 1.34

The interpreter will show an error message which occurs as a product
of an attempt to apply =2= to =2=, since Scheme does not encode numbers as
functions. This is more visible through the expansion of the
application below:

#+begin_example
  (f f)
⊢ (f 2)
⊢ (2 2)
⊢ Error
#+end_example

* Exercise 1.35

#+begin_src scheme
(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))
#+end_src

*Proof.* Given $x \mapsto 1 + \frac{1}{x}$, if $x_0$ is a fixpoint, then $1 +
\frac{1}{x} = x_0$.
We also know that $\phi^2 = \phi + 1$.
From this follows:

\begin{align*}
        x_0 &= 1 + \frac{1}{x_0}\\
        x_{0}^{2} &= x_0\left(1 + \frac{1}{x_0}\right)\\
        x_{0}^{2} &= x_0 + 1
\end{align*}


$\therefore$ $\phi$ is a fixpoint for $x \mapsto
1 + \frac{1}{x}$. $\blacksquare$

We then apply this to compute $\phi$ as a fixpoint of that
transformation, using /average damping/:

#+begin_src scheme
(define (compute-phi)
  (fixed-point (lambda (x) (average x (1+ (/ 1 x))))
               1.0))
#+end_src

* Exercise 1.36

#+begin_src scheme
(define (fixed-point-disp f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (show-guess guess)
    (display "Guess: ")
    (display guess)
    (newline))
  (define (try guess)
    (show-guess guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))
#+end_src

Computing $x^{x} = 1000$ by using $x \mapsto log(1000) \div log(x)$:

#+begin_src scheme
(define (compute-x-pow-x-equals-thousand)
  (fixed-point-disp (lambda (x)
                      (/ (log 1000) (log x)))
                    5.0))

(define (compute-x-pow-x-equals-thousand-dampened)
  (fixed-point-disp (lambda (x)
                      (average x (/ (log 1000) (log x))))
                    5.0))
#+end_src

** Output

#+begin_example
> (compute-x-pow-x-equals-thousand)
Guess: 5.0
Guess: 4.29202967422018
Guess: 4.741863119908242
Guess: 4.438204569837609
Guess: 4.635299887107611
Guess: 4.50397811613643
Guess: 4.589989462723705
Guess: 4.53301150767844
Guess: 4.570475672855484
Guess: 4.545720389670642
Guess: 4.562024936588171
Guess: 4.551263234080531
Guess: 4.55835638768598
Guess: 4.553676852183342
Guess: 4.55676216434628
Guess: 4.554727130670954
Guess: 4.556069054770006
Guess: 4.555184018843625
Guess: 4.5557676565438205
Guess: 4.555382746639082
Guess: 4.55563658243586
Guess: 4.555469180245326
Guess: 4.555579577900997
Guess: 4.5555067722873686
Guess: 4.5555547860484085
Guess: 4.555523121789556
Guess: 4.555544003742869
Guess: 4.555530232469306
4.555539314360711
#+end_example

#+begin_example
> (compute-x-pow-x-equals-thousand-dampened)
Guess: 5.0
Guess: 4.64601483711009
Guess: 4.571611286076025
Guess: 4.558294317536066
Guess: 4.556006022881116
Guess: 4.555615799731297
Guess: 4.555549342575593
Guess: 4.555538027101999
4.5555361005218895
#+end_example

* Exercise 1.37

** a

#+begin_src scheme
(define (cont-frac n d k)
  (define (cont-frac-rec i)
    (/ (n i)
       (+ (d i)
          (if (>= i k)
              0
              (cont-frac-rec (1+ i))))))
  (cont-frac-rec 1))
#+end_src

*** Testing

#+begin_src scheme
(let ((one (lambda (i) 1.0)))
  (- (/ 1 (compute-phi))
     (cont-frac one one 11)))
#+end_src

The result seems to be similar in four decimal places starting around
eleven successive values.

** b

Iterative process

#+begin_src scheme
(define (cont-frac-iterative n d k)
  (define (cont-frac-iter acc i)
    (if (< i 1)
        acc
        (cont-frac-iter (/ (n i)
                           (+ (d i) acc))
                        (1- i))))
  (cont-frac-iter 0 k))
#+end_src

* Exercise 1.38

#+begin_src scheme
(define (compute-e-cont k)
  (+ 2 (cont-frac (lambda (i) 1.0)
                  (lambda (i) (if (= (remainder i 3) 2)
                             (* 2 (1+ (floor (/ i 3))))
                             1))
                  k)))
#+end_src

* Exercise 1.39

#+begin_src scheme
(define (tan-cf x k)
  (cont-frac (lambda (i)
               (or (and (= i 1) x)
                   (- (square x))))
             (lambda (i) (1- (* 2 i)))
             k))
#+end_src

* Exercise 1.40

#+begin_src scheme
(define (cubic a b c)
  (lambda (x)
    (+ (cube x)
       (* a (square x))
       (* b x)
       c)))
#+end_src

* Exercise 1.41

#+begin_src scheme
(define (double f)
  (lambda (x) (f (f x))))
#+end_src

* Exercise 1.42

#+begin_src scheme
(define (compose f g)
  (lambda (x) (f (g x))))
#+end_src

* Exercise 1.43

#+begin_src scheme
(define (repeated f n)
  (if (= n 1)
      f
      (compose f (repeated f (1- n)))))
#+end_src

* Exercise 1.44

#+begin_src scheme
(define dx 0.000001) ; some epsilon

(define (smooth f)
  (define (average a b c)
    (/ (+ a b c) 3))
  (lambda (x)
    (average (f (- x dx))
             (f x)
             (f (+ x dx)))))

(define (smooth-n-fold x n)
  (repeated smooth n))
#+end_src

* Exercise 1.45

Let's start by defining some utility functions which we'll need.

#+name: 1_45_setup
#+begin_src scheme
(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))

(define (average-damp f)
  (lambda (x) (average x (f x))))

(define (average a b)
  (/ (+ a b) 2))

(define (compose f g)
  (lambda (x) (f (g x))))

(define (repeated f n)
  (if (= n 1)
      f
      (compose f (repeated f (1- n)))))

(define (square x)
  (* x x))

(define (cube x)
  (* x x x))

#+end_src

The square root procedure can be achieved by average damping the
procedure $y \mapsto \frac{x}{y}$ for a given $x$ value.

#+begin_src scheme
(define (sqrt1 x)
  (fixed-point (average-damp (lambda (y) (/ x y)))
               1.0))
#+end_src

For cube roots, we can average damp $y \mapsto \frac{x}{y^2}\, \forall\,
x$.

#+begin_src scheme
(define (cbrt x)
  (fixed-point (average-damp (lambda (y) (/ x (square y))))
               1.0))
#+end_src

Fourth roots do not converge by the same method. However, average
damping twice does the trick.

#+begin_src scheme
(define (fthrt x)
  (fixed-point ((repeated average-damp 2)
                (lambda (y) (/ x (cube y))))
               1.0))
#+end_src

Now we produce some experiments.

We need to generate the procedure for an /nth/ root, by average damping
the procedure $y \mapsto \frac{x}{y^{n-1}}$.

Let's see if average damping twice converges for fifth roots.

#+begin_src scheme
(define (fifrt x)
  (fixed-point ((repeated average-damp 2)
                (lambda (y) (/ x (expt y 4))))
               1.0))
#+end_src

It does. =(fifrt 32)= gives a result of =2.000001512995761=. Pretty close
to =2=.

Now let's experiment with the sixth root.

#+begin_src scheme
(define (sixrt x)
  (fixed-point ((repeated average-damp 2)
                (lambda (y) (/ x (expt y 5))))
               1.0))
#+end_src

This one also converges. =(sixrt 729)= results in =2.999996785898161=,
close to =3=.

Now for the seventh root.

#+begin_src scheme
(define (seprt x)
  (fixed-point ((repeated average-damp 2)
                (lambda (y) (/ x (expt y 6))))
               1.0))
#+end_src

=(seprt 78125)= results in =5.000004267274231=. Close to =5=.

Eight root /does not converge/! We need to average damp *three times* for
it to work; now =(eighrt 390625)= gives =5.000000000000416=, close to =5=.

#+begin_src scheme
(define (eigrt x)
  (fixed-point ((repeated average-damp 3)
                (lambda (y) (/ x (expt y 7))))
               1.0))
#+end_src

So far it seems that, for every $n$ multiple of four, the number of
average dampings increase by one. Let's test this theory with a
general procedure.

We'll also be using the procedure =div=, which gives the integer
division of two numbers. Mathematically, we have

\begin{equation*}
    \text{nthrt}(n, x) \approx
    \text{fixpoint}\left(
        \text{avgd}^{1 + (n \text{ div } 4)}\left[y \mapsto \frac{x}{y^{n - 1}}\right], 1
        \right)
\end{equation*}

#+name: 1_45_nthrt
#+begin_src scheme :noweb strip-export
<<1_45_setup>>
(define (nthrt n x)
  (fixed-point ((repeated average-damp (1+ (div n 4)))
                (lambda (y) (/ x (expt y (1- n)))))
               1.0))
#+end_src

This procedure seems to work well for all numbers. Below I defined
some tests and ran them as an org-mode script.

#+name: 1_45_test_def
#+begin_src scheme :noweb strip-export
<<1_45_nthrt>>
(define (test-roots number range)
  (map (lambda (x)
         (let ((result (nthrt x (expt number x))))
           (map display
                (list (if (< x 10) " " "")
                      x
                      (let ((order (remainder x 10)))
                        (cond ((= order 1) "st")
                              ((= order 2) "nd")
                              (else "th")))
                      " root of "
                      number
                      "^"
                      x
                      (if (< x 10) " " "")
                      " = "
                      result))
           (newline)
           result))
       (cdr (iota range))))
#+end_src

Interestingly, Chez Scheme seems to run these tests asynchronously.

#+begin_src scheme :noweb strip-export :results output :cache yes :exports both
<<1_45_test_def>>
(test-roots 29 51)
#+end_src

#+RESULTS[79d171d38eeb5a4fb459fd0b153c0aaadee9c0af]:
#+begin_example
49th root of 29^49 = 29.001661527357292
50th root of 29^50 = 29.001623947207396
47th root of 29^47 = 29.0008527351452
48th root of 29^48 = 29.001698691584636
45th root of 29^45 = 29.000900323838785
46th root of 29^46 = 29.000878311390686
43th root of 29^43 = 29.00045753710591
44th root of 29^44 = 29.00091916724035
41st root of 29^41 = 29.00048840814617
42nd root of 29^42 = 29.000475618547433
39th root of 29^39 = 29.000248410052485
40th root of 29^40 = 29.000496200535856
37th root of 29^37 = 29.000266766220143
38th root of 29^38 = 29.00025595095766
35th root of 29^35 = 29.00013415997967
36th root of 29^36 = 29.000271369138332
33th root of 29^33 = 29.000142273618366
34th root of 29^34 = 29.000132394340277
31st root of 29^31 = 29.00007110241029
32nd root of 29^32 = 29.000145417732796
29th root of 29^29 = 29.00007350085268
30th root of 29^30 = 29.00006708757493
27th root of 29^27 = 29.00003143256827
28th root of 29^28 = 29.00007319088057
25th root of 29^25 = 29.000036365379778
26th root of 29^26 = 29.00003725483326
23th root of 29^23 = 29.000011841469654
24th root of 29^24 = 29.000037032565906
21st root of 29^21 = 29.0000156147361
22nd root of 29^22 = 29.000016373930023
19th root of 29^19 = 29.000005526749263
20th root of 29^20 = 29.00001599654381
17th root of 29^17 = 29.00000415600814
18th root of 29^18 = 29.000006721401753
15th root of 29^15 = 29.000000129806928
16th root of 29^16 = 29.00000630999765
13th root of 29^13 = 29.000001349391844
14th root of 29^14 = 29.00000054147541
11st root of 29^11 = 29.0000021591665
12nd root of 29^12 = 29.000003084211684
 9th root of 29^9  = 29.00000069054954
10th root of 29^10 = 28.999999205552584
 7th root of 29^7  = 29.000003820232433
 8th root of 29^8  = 29.0
 5th root of 29^5  = 29.0000005410404
 6th root of 29^6  = 29.00000195366421
 3th root of 29^3  = 29.00000228321477
 4th root of 29^4  = 29.0
 1st root of 29^1  = 28.999993324279785
 2nd root of 29^2  = 29.00000000000003
#+end_example

* Exercise 1.46

#+begin_src scheme
(define (iterative-improve good-enough? improve)
  (lambda (initial-guess)
    (define (iter guess)
      (if (good-enough? guess)
          guess
          (iter (improve guess))))
    (iter initial-guess)))
#+end_src

#+begin_src scheme
(define (sqrt-iter-improve x)
  (define (good-enough? guess)
    (< (abs (- (square guess) x)) 0.001))
  (define (improve guess)
    (average guess (/ x guess)))
  ((iterative-improve good-enough? improve) 1.0))
#+end_src

#+begin_src scheme
(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (improve x)
    (f x))
  (define (try x)
    (< (abs (- x (improve x))) tolerance))
  ((iterative-improve try improve) first-guess))
#+end_src

